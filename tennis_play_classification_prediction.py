# -*- coding: utf-8 -*-
"""Tennis play classification prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16I6dO5TsY-JRTVaUs0TMuPgRPTHjO1qX
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from google.colab import files
uploaded=files.upload()

import io

data=pd.read_csv(io.BytesIO(uploaded['play_tennis.csv']))
data

print(data.columns)

data.isnull().any()

#data=data.dropna(axis=0,how='any')
data

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data['outlook_en']=le.fit_transform(data['outlook'])
data['temp_en']=le.fit_transform(data['temp'])
data['hum_en']=le.fit_transform(data['humidity'])
data['wind_en']=le.fit_transform(data['wind'])
data['play_en']=le.fit_transform(data['play'])
data

cols=['outlook_en','temp_en','hum_en','wind_en','play_en']
cor=data[cols].corr()
hm=sns.heatmap(cor,annot=True)

#Extracting independent and dependent variables
feat=['outlook_en','temp_en','hum_en','wind_en']
X=data[feat]
y=data['play_en']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
sc1=sc.fit_transform(X_train)
sc1=sc.fit_transform(X_test)

y_test

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
lg=LogisticRegression()
lg.fit(X_train,y_train)
y_pred=lg.predict(X_test)
rep=pd.DataFrame()
rep['Actual values']=y_test
rep['predicted values']=y_pred
print(rep)
accuracy_score(y_test,y_pred)

from sklearn.naive_bayes import GaussianNB
g=GaussianNB()
g.fit(X_train,y_train)
y_pred=g.predict(X_test)
rep=pd.DataFrame()
rep['Actual values']=y_test
rep['predicted values']=y_pred
print(rep)
accuracy_score(y_test,y_pred)

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,y_pred)
plt.title('confusion matrix heatmap',fontsize=12)
sns.heatmap(cm,annot=True)
plt.show

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.tree import DecisionTreeClassifier
t=DecisionTreeClassifier(criterion='entropy',random_state=0)
t.fit(X_train,y_train)
y_pred=t.predict(X_test)
rep=pd.DataFrame()
rep['Actual values']=y_test
rep['predicted values']=y_pred
print(rep)
accuracy_score(y_test,y_pred)